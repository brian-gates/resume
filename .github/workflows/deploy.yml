name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: self-hosted
    env:
      N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}
      NEXT_PUBLIC_ENABLE_CHAT: 'true'

    steps:
      - name: Get Environment
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "Current branch: $BRANCH"
          if [ "$BRANCH" = "main" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          fi
          echo "Will deploy to $DEPLOY_ENV environment"
          echo "Job started at $(date)"

      - name: Clone or update repository
        run: |
          REPO_DIR=$HOME/repo-$DEPLOY_ENV
          if [ -d "$REPO_DIR" ]; then
            echo "Updating existing repository in $REPO_DIR"
            cd $REPO_DIR
            git fetch origin
            git checkout $GITHUB_REF_NAME || git checkout staging
            git pull
          else
            echo "Cloning repository to $REPO_DIR"
            git clone https://github.com/brian-gates/resume.git $REPO_DIR
            cd $REPO_DIR
            git checkout $GITHUB_REF_NAME || git checkout staging
          fi
          echo "Using commit: $(git rev-parse HEAD)"

      - name: Setup prerequisites
        run: |
          # Add debug output
          echo "HOME directory: $HOME"
          echo "Current directory: $(pwd)"

          # Load NVM
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

          # Debug versions
          echo "Node version before: $(node --version 2>/dev/null || echo 'not found')"
          echo "NVM version: $(nvm --version 2>/dev/null || echo 'not found')"

          # Install Node.js
          nvm install 20
          nvm use 20

          # Verify installations
          echo "Node version after: $(node --version)"
          echo "NPM version: $(npm --version)"

          # Install pnpm
          npm install -g pnpm
          echo "PNPM version: $(pnpm --version)"

      - name: Install dependencies
        run: |
          # Add debug output
          echo "Current directory: $(pwd)"

          # Load NVM and node
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 20

          cd $HOME/repo-$DEPLOY_ENV
          echo "Node version: $(node --version)"
          echo "Running pnpm install..."
          pnpm i --no-frozen-lockfile

      - name: Build application
        run: |
          # Load NVM and node
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 20

          cd $HOME/repo-$DEPLOY_ENV
          echo "Building application..."
          pnpm build
          echo "Build completed."

      - name: Install PM2 if needed
        run: |
          # Load NVM and node
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 20

          # Install PM2 globally if not already available
          echo "Checking for PM2..."
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2 globally..."
            npm install -g pm2
          fi
          echo "PM2 version: $(pm2 --version)"

      - name: Create PM2 config and deploy
        run: |
          # Load NVM and node
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 20

          cd $HOME/repo-$DEPLOY_ENV

          if [ "$DEPLOY_ENV" = "staging" ]; then
            echo "Deploying to STAGING on port 3001"
            PM2_APP_NAME="briangates-website-staging"
            PM2_PORT=3001
          else
            echo "Deploying to PRODUCTION on port 3000"
            PM2_APP_NAME="briangates-website-production"
            PM2_PORT=3000
          fi

          # Create a simple PM2 configuration file using node
          node -e "
            const fs = require('fs');
            const config = {
              apps: [{
                name: '${PM2_APP_NAME}',
                script: 'pnpm',
                args: 'start',
                instances: 1,
                exec_mode: 'fork',
                autorestart: true,
                watch: true,
                watch_delay: 1000,
                ignore_watch: ['node_modules', '.git', '.next/cache'],
                max_memory_restart: '1G',
                env: {
                  NODE_ENV: 'production',
                  PORT: ${PM2_PORT},
                  N8N_WEBHOOK_URL: process.env.N8N_WEBHOOK_URL,
                  NEXT_PUBLIC_ENABLE_CHAT: process.env.NEXT_PUBLIC_ENABLE_CHAT
                }
              }]
            };
            fs.writeFileSync('ecosystem.config.js', 'module.exports = ' + JSON.stringify(config, null, 2) + ';');
          "

          # Start or restart the app
          pm2 restart ecosystem.config.js || pm2 start ecosystem.config.js

          echo "Deployment complete to $DEPLOY_ENV environment at $(date)"
